generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
    output        = "./generated/mysql"
}

datasource db {
    provider = "mysql"
    url      = env("MYSQL_DATABASE_URL")
}

generator markdown {
    provider = "prisma-markdown"
    output   = "./MYSQL_ERD.md"
    title    = "Goom"
}

///  
/// 
/// @namespace Actors
model User {
    /// User's ID.
    id               String             @id @default(uuid())
    google_id        String             @unique
    name             String
    profileThumbnail String
    session          Session?           @relation(fields: [sessionId], references: [id])
    sessionId        String?
    profile          Profile?
    createdAt        DateTime           @default(now())
    modifiedAt       DateTime           @updatedAt
    role             Role               @default(USER)
    userNotification UserNotification[]
    userChatRoom     UserChatRoom[]
    notification     Notification[]     @relation("notofication")
    following        Follow[]           @relation("following")
    followers        Follow[]           @relation("followers")
}

/// @namespace Actors
model Follow {
    followerId String
    follower   User     @relation("followers", fields: [followerId], references: [id])
    followeeId String
    followee   User     @relation("following", fields: [followeeId], references: [id])
    createdAt  DateTime @default(now())

    @@id([followerId, followeeId])
}

/// @namespace Actors
model Profile {
    id           String  @id @default(uuid())
    family_name  String?
    given_name   String?
    profileImage String
    email        String?
    userId       String  @unique
    user         User    @relation(fields: [userId], references: [id])
}

/// @namespace Sessions
/// @erd User
model Session {
    id         String    @unique @default(uuid())
    isPrivate  Boolean   @default(false)
    host       String
    title      String
    users      User[]
    createdAt  DateTime  @default(now())
    modifiedAt DateTime  @updatedAt
    endedAt    DateTime?
}

/// @namespace Notifications
/// @erd User
model Notification {
    id               String             @unique @default(uuid())
    title            String
    content          String             @db.Text()
    createdAt        DateTime           @default(now())
    userNotification UserNotification[]
    sender           User               @relation("notofication", fields: [senderId], references: [id])
    senderId         String
}

/// @namespace Notifications
model UserNotification {
    isRead         Boolean      @default(false)
    createdAt      DateTime     @default(now())
    modifiedAt     DateTime     @updatedAt
    user           User         @relation(fields: [userId], references: [id])
    userId         String
    notification   Notification @relation(fields: [notificationId], references: [id])
    notificationId String

    @@id([userId, notificationId])
}

/// @namespace Chats
model ChatRoom {
    id           String         @id @default(uuid())
    userChatRoom UserChatRoom[]
    createdAt    DateTime       @default(now())
}

/// @namespace Chats
/// @erd User
model UserChatRoom {
    user       User     @relation(fields: [userId], references: [id])
    userId     String
    chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
    chatRoomId String
    createdAt  DateTime @default(now())

    @@id([userId, chatRoomId])
}

/// @namespace Actors
enum Role {
    USER
}
